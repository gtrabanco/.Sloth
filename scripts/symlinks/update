#!/usr/bin/env bash

set -euo pipefail

#shellcheck disable=SC1091
. "${SLOTH_PATH:-${DOTLY_PATH:-}}/scripts/core/_main.sh"
dot::load_library "dotbot.sh"

symlinks::get_files() {
  [[ -d "${SLOTH_PATH:-${DOTLY_PATH:-}}/symlinks" ]] &&
    find "${SLOTH_PATH:-${DOTLY_PATH:-}}/symlinks" -name "*.yaml" -type f,l -print0 |
    xargs -0 -I _ basename _ | sort
}

symlinks::fzf() {
  local piped_values
  piped_values=("$(< /dev/stdin)")

  printf "%s\n" "${piped_values[@]}" | fzf --extended \
    --header "Select file to apply symlinks update" \
    --preview "echo 'Press Ctrl+C to exit with no selection.'"
}

##? Apply symlinks added in a dotly update
##?
##? Usage:
##?    update [-p|--no-prompt] [<symlinks_file>]
##?
##? Options:
##?   -h --help       Show this help
##?   -v --version    Show the program version
##?   -p --no-prompt  Avoid warning the user about the consecuences of apply
##?                   a dotbot file.
##?
#? 2.0.0
docs::parse "$@"

if [[ -z "$symlinks_file" ]]; then
  symlinks_file="$(symlinks::get_files | symlinks::fzf)"
  [[ -z "$symlinks_file" ]] && exit 0
  symlinks_file="${SLOTH_PATH:-${DOTLY_PATH:-}}/symlinks/$symlinks_file"
else
  for f in "$symlinks_file" "$symlinks_file.yaml" "$symlinks_file.yml"; do
    [[ -e "$f" ]] && symlinks_file="$f" && break
  done

  if [[ ! -e "$symlinks_file" ]]; then
    output::error "The file does not exists"
    exit 1
  fi
fi

if ! ${no_prompt:-false} && ! output::yesno "This could be danger your current dotfiles. Do you still want to continue"; then
  exit 1
fi

output::header "Apply dotbot update to your dotfiles"
output::write "This will apply a selected symlinks to apply any dotly update"

output::empty_line
#shellcheck disable=SC2034
DOTBOT_BASE_PATH="$DOTFILES_PATH"
dotbot::apply_yaml "$symlinks_file"
output::empty_line

output::write "Remember to merge this symlinks file to yours in:"
output::answer "$DOTFILES_PATH/symlinks/conf.yaml"
