#!/usr/bin/env bash

#shellcheck disable=SC1091
. "${SLOTH_PATH:-${DOTLY_PATH:-}}/scripts/core/src/_main.sh"
dot::load_library "dump.sh"

script::depends_on docpars

##? Import previously dumped packages from:
##?  * Brew
##?  * Python
##?  * Volta or NPM
##?
##? If you do not provide any option it will only ask you for a file of packages to restore
##? if there is no file with the same name as the current hostname.
##?
##? Usage:
##?   import [--prompt|-p|--never-prompt|-n] [<package_managers>...]
##?
##? Options:
##?   --prompt -p        You will be asked always for a file to restore in every package manager or lang
##?   --never-prompt -n  You will never be asked for any file to restore, if there is no file with the
##?                      same name as current hostname the package/lang is ignored and continue to try
##?                      with next package
##?
#? v3.0.0
docs::parse "$@"

output::write "ðŸŽ© Let's import your packages (this could take a while)" && output::empty_line

[[ -z "${package_managers[*]:-}" ]] && readarray -t package_managers< <(package::get_available_package_managers)

for package_manager in "${package_managers[@]}"; do
  # Reset
  file_path=""
  directory_file_path=""

  # Setting variables
  file_path="$(dump::file_path "$package_manager" "$(hostname -s)")"
  directory_file_path="$(dirname "$file_path")"

  if package::command_exists "$package_manager" "title"; then
    pkgmgr_title="$(package::command "$package_manager" "title")"
  else
    pkgmgr_title="$package_manager"
  fi

  # Continue if is npm and volta is isntalled
  if
    [[ $package_manager == "npm" ]] &&
      package::get_available_package_managers | grep -q "^volta$" ||
      ! package::command_exists "$package_manager" "dump"
  then
    continue
  fi

  # If always prompt or file does not exists and no never prompt ask fot the importing file
  {
    ${prompt:-false} ||
      [[ ! -f "$file_path" ]] &&
      ! ${never_prompt:-false} &&
      file_path=""
  } && file_path="$(package::which_file "$directory_file_path" "Select $(eval echo "\$${package_manager}_title") file to import")"

  output::empty_line
  output::h2 "ðŸš€ Importing ${pkgmgr_title} apps"

  [[ -z "$file_path" ]] &&
    output::answer "Ignoring ${pkgmgr_title} import" &&
    output::empty_line &&
    continue

  {
    [[ -f "$file_path" ]] &&
      package::command_exists "$package_manager" "import" &&
      package::load_manager "$package_manager" &&
      package::command "$package_manager" "import" "$file_path" &&
      output::answer "$(eval echo "\$${package_manager}_title") apps importing from \`${file_path}\`" &&
      output::empty_line
  } || {
    output::error "Error while try to import $(eval echo "\$${package_manager}_title") apps from \`${file_path}\`" &&
      output::empty_line
  }
done

output::empty_line
output::solution 'All packages imported'
output::empty_line
