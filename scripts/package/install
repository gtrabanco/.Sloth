#!/usr/bin/env bash

#shellcheck disable=SC1091
. "${SLOTH_PATH:-${DOTLY_PATH:-}}/scripts/core/src/_main.sh"

##? Install a package
##?
##? Usage:
##?    add -v | --version
##?    add -h | --help
##?    add [-f | --force] [-s | --skip-recipe] [--pkgmgr <package_manager>] <packages_names>...
##?
##? Options:
##?    -h --help         Show script help
##?    -v --version      Show script version
##?    -f --force        Pass to install wrapper (function ::install) --force option
##?    -s --skip-recipe  Skip the receipe and force to use a package manager, this omit any recipe
##?    --pkgmgr          Force to use a package manager, for example: cargo
##?
##? SCRIPT_VERSION 3.2.0
if ! ${DOTLY_INSTALLER:-false} && package::is_installed "docpars"; then
  docs::parse "$@"
  _all_args=("$@")

  # There is an issue in docpars when using arrays
  if ! ${pkgmgr:-false} && [[ -n "${package_manager}" ]]; then
    packages_names=(
      "$package_manager"
      "${packages_names[@]}"
    )
    package_manager=""
  fi
else
  _all_args=("$@")
  package_name=""
  version=false
  help=false
  skip_recipe=false
  package_manager=""
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --skipe-recipe | -s)
        skip_recipe=true
        shift
        ;;
      --pkgmgr)
        package_manager="$2"
        shift 2
        ;;
      --force | -f)
        force=true
        shift
        ;;
      --version | -v)
        version=true
        shift
        ;;
      --help | -h)
        help=true
        shift
        ;;
      *)
        packages_names=("$@")
        break 2
        ;;
    esac
  done
fi

# Multiple package installation
number_of_packages="${#packages_names[@]}"
only_args_number=$((${#_all_args[@]} - number_of_packages))
given_options=("${_all_args[@]:0:$only_args_number}")

if [[ $number_of_packages -gt 1 ]]; then
  any_error=0
  for pkg in "${packages_names[@]}"; do
    if [[ ${#given_options[@]} -gt 0 ]]; then
      "${SLOTH_PATH:-${DOTLY_PATH:-}}/bin/dot" package add "${given_options[@]}" "$pkg" || any_error=1
    else
      "${SLOTH_PATH:-${DOTLY_PATH:-}}/bin/dot" package add "$pkg" || any_error=1
    fi
  done
  # Exit here because we want to execute them in order
  exit $any_error
elif [[ $number_of_packages -eq 1 ]]; then
  package_name="$(echo "${packages_names[*]}" | str::to_lower | xargs)"
else
  output::error "You should provide at least one package to be installed"
  exit 1
fi

# Force to use package manager, skip recipe always
if [[ -n "${package_manager:-}" ]]; then
  # Used in package::command
  #shellcheck disable=SC2034
  FORCED_PKGMGR="${package_manager:-}"
  skip_recipe=true
fi

if ${version:-}; then
  output::write "${SCRIPT_NAME} v${SCRIPT_VERSION}"
  exit 0
elif ${help:-}; then
  grep '^##?' "$0" | tr '##? ' ' '
  exit 0
elif [[ -z "${package_name:-}" ]]; then
  output::error "No package name provided"
  exit 1
fi

# If the package is not docpars and docpars is not installed
if [[ "$package_name" != "docpars" && "$package_name" != "cargo" ]] && ! package::is_installed "docpars"; then
  script::depends_on docpars
fi

# Load cargo PATH
if [[ -f "$HOME/.cargo/env" ]]; then
  . "$HOME/.cargo/env"
fi

# Check if package is installed
! ${force:-false} && package::is_installed "$package_name" && log::success "$package_name already installed" && exit 0

# if force give to install argument --force
if ${force:-false}; then
  install_args=("--force")
else
  install_args=()
fi

# If there is a recipe for the package use it
if ! ${skip_recipe:-false} &&
  [[ -n "$(registry::recipe_exists "$package_name")" ]]; then
  if registry::install "$package_name" "${install_args[@]}"; then
    output::write "✅ \`$package_name\` installed"
    exit 0
  fi
else
  package::install "$package_name" "${FORCED_PKGMGR:-auto}" "${install_args[@]}" |&| true

  if package::is_installed "$package_name"; then
    output::write "✅ \`$package_name\` installed"

    exit 0
  fi
fi

output::write "❌ \`$package_name\` could not be installed" && exit 1
