#!/usr/bin/env bash
#shellcheck disable=SC2016
##? Generate a binary script for dotfiles
##?
##?
##? Usage:
##?   bin [-h | --help]
##?   bin [-v | --version]
##?   bin [-c | --core] <script_name> [<description>]
##?
##? Options:
##?   -h --help          Show this help
##?   -v --version       Show the program version
##?   -s --sample        Create a script using more complete example with some comments.
##?                      useful if it is your first script. Anyway you can see more help
##?                      in the docopt website: http://docopt.org
##?   -c --core          Create the context and script in "${SLOTH_PATH:-${DOTLY_PATH:-}}/scripts" instead of
##?                      your "$DOTFILES_PATH/scripts" folder
##?   -d --dotly         Generate a Dotly compatible script
##?   --author <author>  Provide who is the author, if none the default git author will
##?                      be used
##?   --email <email>    Provide author email, if none the default git author email will
##?                      be used
##?   -o --open          Open editor by using env var \$EDITOR to edit or view the script if not defined just use "cat"
##?
##? Author:
##?   Gabriel Trabanco Llano <gtrabanco@users.noreply.github.com>
##?
#? v3.0.0

dot::load_library "templating.sh"

is_valid_name() {
  local -r name="${1:-}"
  ! [[ "${name:0:1}" == "_" || "${name:0:1}" == "." ]]
}

editor="${EDITOR:-cat}"

if [[ $script_name == "up" || $script_name == "dot" || $script_name == "sloth" ]]; then
  output::error "You can not use those names for a dotfiles script or .Sloth will be broken"
  exit 5
fi

if ${core:-}; then
  new_script_path="${SLOTH_PATH}/bin/${script_name:-}"
else
  new_script_path="${DOTFILES_PATH}/bin/${script_name:-}"
fi

if [[ -z "${script_name:-}" ]]; then
  output::error "üö® No name for the script provided"
  exit 1
fi

if ! is_valid_name "$script_name"; then
  output::error "The given name \`$script_name\` for binary is wrong. Names can not start with \`.\` or \`_\`."
  output::answer "These names are restricted for private and non execution or private usage files that should be created manually."
  exit 1
fi

if [[ ! -d "$DOTFILES_PATH" ]]; then
  output::error "‚ùå Your dotfiles could not be found"
  exit 1
fi
mkdir -p "$DOTFILES_PATH/bin"

if [[ -f "$new_script_path" ]] &&
  ! output::yesno " ‚ö†Ô∏è Script \`${name:-}\` exists in \`\$DOTFILES_PATH/bin\`! Do you want to overwrite it (this will delete current file)"; then
  output::error "User aborted"
  exit 1
fi

author="${author:-$(git config --global --get user.name)}"
email="${email:-$(git config --global --get user.email)}"

rm -f "$new_script_path"
touch "$new_script_path"
{
  printf "#!/usr/bin/env sloth\n\n"
  printf "#? Description: %s\n" "${description:-Describe your script here}"
  printf "#? Author: %s <%s>\n\n" "$author" "$email"
  printf '[[ $* == *"--help"* ]] && grep "#?" "$BASH_SOURCE" && exit\n'
  printf 'output::write "Hello \`.Sloth\`"\n'
} >> "$new_script_path"

chmod u+x "$new_script_path"

output::empty_line
output::solution "The script \`$script_name\` where successfully created."
output::empty_line
output::write "You can access the scipt with your favorite editor by executing:"
output::write "\`\$EDITOR \"\$DOTFILES_PATH/bin/${script_name:-}\"\`"
output::empty_line

if ${open:-} && [[ -f "$new_script_path" ]]; then
  "$editor" "${new_script_path:-}"
fi
