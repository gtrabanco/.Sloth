#!/usr/bin/env bash
#shellcheck disable=SC2001

set -euo pipefail

#shellcheck disable=SC1091
. "${SLOTH_PATH:-${DOTLY_PATH:-}}/scripts/core/src/_main.sh"
dot::load_library "dotly.sh"

##? Lint all sloth/dotly related bash files
##?
##? Usage:
##?    lint [[-n | --names] | [-p | --patch]] [-d | --dotfiles]
##?    lint [[-n | --names] | [-p | --patch]] <all_files>...
##?
##? Arguments:
##?    all_files      Files to be lint
##?
##? Options:
##?    -h --help      Gives this help
##?    -p --patch     Apply a patch
##?    -d --dotfiles  Execute against your dotfiles instead of Sloth/Dotly core. Implies --names always.
##?    -n --names     Get only a list of files that needs to apply a patch (can not be used with --patch)
##?
##? SCRIPT_VERSION 3.2.0
if [[ "${1:-}" == "-h" ]] || [[ "${1:-}" = "--help" ]] || package::is_installed "docpars"; then
  docs::parse "$@"
else
  while [[ $# -gt 0 ]]; do
    case "$1" in
      --names | -n)
        names=true
        shift
        ;;
      --dotfiles | -d)
        dotfiles=true
        shift
        ;;
      --patch | -p)
        patch=true
        shift
        ;;
      *)
        if [[ $# -gt 0 ]]; then
          all_files=("$@")
          shift
        fi
        break 2
        ;;
    esac
  done

  if ${names:-false} && ${patch:-false}; then
    output::error "\`--names\` and \`--patch\` arguments can not be used together"
    docs::parse --help
    exit 1
  fi
fi

script::depends_on shfmt

# Check if file exists
if [[ -z "${all_files[*]:-}" ]]; then
  # Avoid zsh because shfmt show some errors because it do not understand some
  # valid zsh valid syntax
  if ${dotfiles:-false}; then
    readarray -t all_files < <(dotly::list_dotfiles_bash_files | grep -v "${DOTFILES_PATH}/shell/zsh")
  else
    readarray -t all_files < <(dotly::list_bash_files | grep -v "${SLOTH_PATH:-${DOTLY_PATH:-}}/shell/zsh")
  fi
fi

# No color for shfmt
TERM=dumb

# exit code
exit_code=0

for file in "${all_files[@]}"; do
  [[ ! -f "$file" ]] &&
    exit_code=1 &&
    output::error "File \`${file}\` could not be checked because it could not be found" &&
    continue

  unset patch_content removed_empty
  patch_content="$(shfmt -ln bash -sr -ci -i 2 -d "$file" 2> /dev/null || true)"
  removed_empty="$(echo "$patch_content" | sed 's/[[:space:]]//g')"
  ! [[ -n "$removed_empty" && "$(echo "$patch_content" | wc -l)" -gt 2 ]] && continue

  if ${names:-false}; then
    output::answer "$file"
    exit_code=1
  elif ${patch:-false}; then
    {
      output::answer "Linting \`$file\`" &&
        echo "$patch_content" | patch "$file" &> /dev/null
    } || exit_code=1
  else
    echo "$patch_content"
    exit_code=1
  fi
done

exit $exit_code
