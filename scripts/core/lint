#!/usr/bin/env bash

set -euo pipefail

#shellcheck disable=SC1091
. "${SLOTH_PATH:-$DOTLY_PATH}/scripts/core/src/_main.sh"
dot::load_library "dotly.sh"

# Default values
patch=false
dotfiles=false

##? Lint all sloth/dotly related bash files
##?
##? Usage:
##?    lint [ --patch | -p ] [--dotfiles | -d]
##?    lint [--dotfiles | -d]
##?
##? Options:
##?    --help -h      Gives this help
##?    --patch -p     Apply a patch
##?    --dotfiles -d  Execute against your dotfiles instead of Sloth/Dotly core
##?
##? SCRIPT_VERSION 3.0.0
if [ "${1:-}" == "-h" ] || [ "${1:-}" = "--help" ]; then
  docs::parse "$@"
else
  while [[ $# -gt 0 ]]; do
    case "$1" in
      --dotfiles | -d)
        dotfiles=true
        shift
        ;;
      --patch | -p)
        patch=true
        shift
        ;;
      *)
        break 2
        ;;
    esac
  done
fi

script::depends_on shfmt

# Avoid zsh because shfmt show some errors because it do not understand some
# valid zsh valid syntax
if ${dotfiles:-false}; then
  mapfile -t all_files < <(dotly::list_dotfiles_bash_files | grep -v "${DOTFILES_PATH}/shell/zsh")
else
  mapfile -t all_files < <(dotly::list_bash_files | grep -v "${SLOTH_PATH:-$DOTLY_PATH}/shell/zsh")
fi

# No color for shfmt
TERM=dumb

# exit code
exit_code=0

for file in "${all_files[@]}"; do
  if ${patch:-false}; then
    unset patch_content
    patch_content="$(shfmt -ln bash -sr -ci -i 2 -d "$file" || true)"

    {
      [[ -n "$patch_content" ]] &&
        output::answer "Linting \`$file\`" &&
        echo "$patch_content" | patch "$file" &> /dev/null
    } || exit_code=1
  else
    if ! shfmt -ln bash -sr -ci -i 2 -d "$file"; then
      exit_code=1
    fi
  fi
done

exit $exit_code
