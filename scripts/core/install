#!/usr/bin/env bash

set -euo pipefail

#shellcheck disable=SC1091
. "${SLOTH_PATH:-${DOTLY_PATH:-}}/scripts/core/src/_main.sh"
dot::load_library "install.sh"
dot::load_library "git_extended.sh"
dot::load_library "sloth_update.sh"

export ZIM_HOME="${SLOTH_PATH:-${DOTLY_PATH:-}}/modules/zimfw"
export PATH="$HOME/.cargo/bin:$PATH"

# Mandatory packages first
script::depends_on docpars fzf

# Packages that are necessary but not in CI env
if [[ "${DOTLY_ENV:-PROD}" != "CI" ]]; then
  script::depends_on python-yq jq cargo-update
fi

# OS specific packages
output::answer "Installing specific OS packages if not installed"
if platform::is_macos; then
  output::answer "üçé Setting up macOS platform"
  install_macos_custom
elif platform::is_linux; then
  output::answer "üêß Setting up Linux Platform"
  install_linux_custom
fi

##? Install dotly and setup dotfiles. By default use a interactive backup (backups are not done for core symlinks).
##?
##? Usage:
##?    install [[-n | --never-backup] | [-b |--always-backup]]
##?
##? Options:
##?    -h --help                Prints this help
##?    -n --never-backup        Never do a backup of user symlinks without prompt
##?    -b --always-backup       Always do a backup of user symlinks without prompt
##?    -i --interactive-backup  Interactive backup of user symlinks asking for every existing symlink before to be applied (default)
##?
##?    install
##?
##? SCRIPT_VERSION "2.0.0"
if ! ${DOTLY_INSTALLER:-false}; then
  docs::parse "$@"
elif [[ "${1:-}" == "--help" || "${1:-}" == "-h" ]]; then
  grep '^##?' "$0" | tr '##? ' ' '
fi

output::answer "Creating dotfiles structure"
"${SLOTH_PATH:-${DOTLY_PATH:-}}/bin/dot" dotfiles create | log::file "Creating dotfiles structure" || exit 1

# Apply user symlinks
output::answer "Setting up symlinks"
symlinks_args=(--interactive-backup)
if [[ "${DOTLY_ENV:-PROD}" == "CI" ]] || ${never_backup:-}; then
  symlinks_args=(--ignore-backup)
elif ${always_backup:-}; then
  symlinks_args=(--backup)
else
  bk=false
  output::yesno "Do you want to perform a backup of symlinks before apply them (this will include all existing files)" && bk=true
  $bk && output::yesno "Do you want to be asked for every file" || symlinks_args=(--backup)
  ! $bk && symlinks_args=(--ignore-backup)
fi
"${SLOTH_PATH:-${DOTLY_PATH:-}}/bin/dot" symlinks apply "${symlinks_args[@]}" --continue-on-error --after-core | log::file "Applying symlinks"
touch "$HOME/.z"
unset symlinks_args bk

# ZSH as default shell if we are using zsh
zsh_shell_path="$(command -v zsh || true)"
output::answer "Trying to setup zsh as the default shell"
if [[ "${DOTLY_ENV:-PROD}" != "CI" ]] && ! str::contains zsh "$SHELL" && platform::command_exists chsh && [[ -x "$zsh_shell_path" ]]; then
  if
    [[ -f "/etc/shells" ]] &&
      ! grep -q "^${zsh_shell_path}$" "/etc/shells" &&
      sudo -v
  then
    sudo bash -c "echo '$zsh_shell_path' | tee -a /etc/shells" &> /dev/null
  fi

  {
    sudo chsh -s "$(command -v zsh)" 2>&1 || output::write "Shell could not be changed to zsh"
  } | log::file "Setting zsh as default shell"
elif [[ "${DOTLY_ENV:-PROD}" != "CI" ]]; then
  output::error "ZSH is not installed or is your current shell"
else
  output::answer "This is step is aborted on CI"
fi
unset zsh_shell_path

# If exists zsh install ZIMFW
output::answer "Installing zim"
if platform::command_exists zsh; then
  zsh "$ZIM_HOME/zimfw.zsh" install | log::file "Installing zim"
else
  output::error "ZIM Framework could not be installed"
  output::write "Use \`dot self debug\` to view what happened"
  output::write "You will need to run manually the ZIM Framework install command"
  output::write "  zsh \`$ZIM_HOME/zimfw.zsh\` install"
fi

if [[ "${DOTLY_ENV:-PROD}" != "CI" ]] && platform::command_exists zsh; then
  output::answer "Installing completions"
  {
    zsh "${SLOTH_PATH:-${DOTLY_PATH:-}}/bin/dot" shell zsh reload_completions &> /dev/null &&
      output::solution '‚úÖ ZSH Completions realoaded'
  } || output::error '‚ùå Error reloading completions'
fi

output::answer "Linking dot command for all users in \`/usr/local/bin\`"
ln -s "${SLOTH_PATH:-${DOTLY_PATH:-}}/bin/dot" /usr/local/bin/dot
[[ -x "/usr/local/bin/dot" ]] || output::error "\`dot\` command could not be linked"

output::answer "Executing custom restoration scripts"
install_scripts_path="${DOTFILES_PATH}/restoration_scripts"
if [ -d "$install_scripts_path" ]; then
  find "$install_scripts_path" -mindepth 1 -maxdepth 1 -type l,f -name '*.sh' |
    sort |
    while read -r install_script; do
      #shellcheck disable=SC1090
      {
        [[ -x "$install_script" ]] && . "$install_script" | log::file "Executing afterinstall: $(basename "$install_script")"
      } || {
        output::error "Install script error in \`$(basename "$install_script")\`"
      }
    done
fi

output::empty_line
output::answer 'ü•≥ üéâ SLOTH installed sucessfully'

output::answer "Trying to load .Sloth"
if [[ -f "${SLOTH_PATH:-${DOTLY_PATH:-}}/shell/init-sloth.sh" ]]; then
  output::solution "Loading .Sloth"
  #shellcheck disable=SC1091
  . "${SLOTH_PATH:-${DOTLY_PATH:-}}/shell/init-sloth.sh" | log::file ".Sloth initiliser" || exit 1

  if [[ "${DOTLY_ENV:-PROD}" == "CI" ]]; then
    echo "$PATH" | tr ':' '\n' | log::file ".Sloth PATH's for Debugging"

    if echo "$PATH" | grep -q "^${SLOTH_PATH:-${DOTLY_PATH:-}}/bin:"; then
      output::error "You need to add ${SLOTH_PATH:-${DOTLY_PATH:-}}/bin to your PATH at the first place"
      output::answer "\`export PATH=\"${SLOTH_PATH:-${DOTLY_PATH:-}}/bin:$PATH\"\`"
      exit 1
    fi
  fi
else
  output::error ".Sloth could not be initilised"
  exit 1
fi

output::answer "Initilizing local repository for enable updates and autoupdates"
sloth_update::sloth_repository_set_ready
output::empty_line

if [[ "${DOTLY_ENV:-PROD}" != "CI" ]]; then
  output::answer "Updating all system packages"
  if platform::is_macos; then
    output::empty_line
    output::write "IMPORTANT!!!"
    output::empty_line
    output::write "If you see any error updating openssl gem execute:"
    output::answer "\`dot mac fix_gem_openssl\`"
    output::answer "More info: https://www.gitmemory.com/issue/ruby/openssl/385/656744433"
    output::empty_line
  fi
  "${SLOTH_PATH:-${DOTLY_PATH}}/bin/dot" package update_all | log::file "Updating all system packages"
fi

output::empty_line
output::solution "üèÅ Now restart your terminal to finish the installation"
