#!/usr/bin/env bash

set -euo pipefail

#shellcheck disable=SC1091
. "${SLOTH_PATH:-$DOTLY_PATH}/scripts/core/src/_main.sh"
dot::load_library "install.sh"
dot::load_library "dotbot_yaml.sh" "symlinks"
dot::load_library "symlinks.sh" "symlinks"

export ZIM_HOME="$DOTLY_PATH/modules/zimfw"
export PATH="$HOME/.cargo/bin:$PATH"

backup_and_warn_if_exists() {
  local file_path suffix bk_file_path
  file_path="${1:-}"
  suffix="${2:-}"

  [[ -n "$file_path" ]] && bk_file_path="$(files::backup_if_file_exists "$file_path" "$suffix")"
  [[ -n "$bk_file_path" ]] && output::error "'$file_path' exists and was moved to '$bk_file_path'"
}

yaml_file_backup() {
  local yaml_file links
  yaml_file="${1:-}"

  for link in $(dotbot::get_all_keys_in "link" "$(symlinks::get_file_path "$yaml_file")"); do
    link="$(eval realpath -q -m -s "$link")"

    if [[ -f "$link" ]]; then
      if ! ${quiet_symlinks:-} &&
        output::yesno "File '$link' exists. Do you want to backup it"; then
        backup_and_warn_if_exists "$link" "$rename_suffix"
      fi
    fi
  done
}

sloth_install_symlinks() {
  local -r CONFIG="$DOTLY_PATH/scripts/self/src/symlinks/${1:-}"
  shift

  [[ ! -f "$CONFIG" ]] && return

  echo
  "$DOTLY_PATH/modules/dotbot/bin/dotbot" "$@" "$CONFIG" || true
  echo
}

if platform::is_macos; then
  output::answer "🍎 Setting up macOS platform"
  install_macos_custom
elif platform::is_linux; then
  output::answer "🐧 Setting up Linux Platform"
  install_linux_custom
fi

script::depends_on docpars zsh fzf python3 python-yq jq tee realpath

##? Install dotly and setup dotfiles. By default use a interactive backup (backups are not done for core symlinks).
##?
##? Usage:
##?    install [[-n | --never-backup] | [-b |--always-backup]]
##?
##? Options:
##?    -h --help                Prints this help
##?    -n --never-backup        Never do a backup of user symlinks without prompt
##?    -b --always-backup       Always do a backup of user symlinks without prompt
##?    -i --interactive-backup  Interactive backup of user symlinks asking for every existing symlink before to be applied (default)
##?
##?    install
##?
##? SCRIPT_VERSION "2.0.0"
if ! ${DOTLY_INSTALLER:-false}; then
  docs::parse "$@"
elif [[ "${1:-}" == "--help" || "${1:-}" == "-h" ]]; then
  grep '^##?' "$0" | tr '##? ' ' '
fi

output::answer "Creating dotfiles structure"
"$DOTLY_PATH/bin/dot" dotfiles create | log::file "Creating dotfiles structure" || exit 1

# Apply user symlinks
output::answer "Setting up symlinks"
symlinks_args=(--interactive-backup)
if [[ "${DOTLY_ENV:-PROD}" == "CI" ]] || ${never_backup:-}; then
  symlinks_args=(--ignore-backup)
elif ${always_backup:-}; then
  symlinks_args=(--backup)
else
  bk=false
  output::yesno "Do you want to perform a backup of symlinks before apply them (this will include all existing files)" && bk=true
  $bk && output::yesno "Do you want to be asked for every file" || symlinks_args=(--backup)
  ! $bk && symlinks_args=(--ignore-backup)
fi
"${SLOTH_PATH:-$DOTLY_PATH}/bin/dot" symlinks apply "${symlinks_args[@]}" --continue-on-error --after-core | log::file "Applying symlinks"
touch "$HOME/.z"
unset symlinks_args bk

# ZSH as default shell if we are using zsh
zsh_shell_path="$(command -v zsh || true)"
output::answer "Trying to setup zsh as the default shell"
if [[ "${DOTLY_ENV:-PROD}" != "CI" ]] && ! str::contains zsh "$SHELL" && platform::command_exists chsh && [[ -x "$zsh_shell_path" ]]; then
  if
    [[ -f "/etc/shells" ]] &&
      ! grep -q "^${zsh_shell_path}$" "/etc/shells" &&
      sudo -v
  then
    echo "$zsh_shell_path" >> "/etc/shells"
  fi

  {
    sudo chsh -s "$(command -v zsh)" 2>&1 || output::write "Shell could not be changed to zsh"
  } | log::file "Setting zsh as default shell"
elif [[ "${DOTLY_ENV:-PROD}" != "CI" ]]; then
  output::error "ZSH is not installed or is your current shell"
else
  output::answer "This is step is aborted on CI"
fi
unset zsh_shell_path

# If exists zsh install ZIMFW
output::answer "Installing zim"
if platform::command_exists zsh; then
  zsh "$ZIM_HOME/zimfw.zsh" install | log::file "Installing zim"
else
  output::error "ZIM Framework could not be installed"
  output::write "Use \`dot self debug\` to view what happened"
  output::write "You will need to run manually the ZIM Framework install command"
  output::write "  zsh \`$ZIM_HOME/zimfw.zsh\` install"
fi

if [[ "${DOTLY_ENV:-PROD}" != "CI" ]] && platform::command_exists zsh; then
  output::answer "Installing completions"
  {
    zsh "$DOTLY_PATH/bin/dot" shell zsh reload_completions &> /dev/null &&
      output::solution '✅ ZSH Completions realoaded'
  } || output::error '❌ Error reloading completions'
fi

output::answer "Executing custom restoration scripts"
install_scripts_path="$DOTFILES_PATH/restoration_scripts"
if [ -d "$install_scripts_path" ]; then
  find "$install_scripts_path" -mindepth 1 -maxdepth 1 -type l,f -name '*.sh' |
    sort |
    while read -r install_script; do
      #shellcheck disable=SC1090
      {
        [[ -x "$install_script" ]] && . "$install_script" | log::file "Executing afterinstall: $(basename "$install_script")"
      } || {
        output::error "Install script error in \`$(basename "$install_script")\`"
      }
    done
fi

output::empty_line
output::answer '🥳 🎉 SLOTH installed sucessfully'
output::solution "🏁 Now restart your terminal to finish the installation"
