#!/usr/bin/env bash

set -euo pipefail

#shellcheck disable=SC1091
. "${SLOTH_PATH:-$DOTLY_PATH}/scripts/core/src/_main.sh"
dot::load_library "install.sh"

export ZIM_HOME="$DOTLY_PATH/modules/zimfw"
export PATH="$HOME/.cargo/bin:$PATH"

if platform::is_macos; then
  output::answer "🍎 Setting up macOS platform"
  install_macos_custom
elif platform::is_linux; then
  output::answer "🐧 Setting up Linux Platform"
  install_linux_custom
fi

script::depends_on docpars zsh fzf python python-yq jq tee realpath

##? Install dotly and setup dotfiles. By default use a interactive backup.
##?
##? Usage:
##?    install [[-n | --never-backup] | [-b |--always-backup]]
##?
##? Options:
##?    -h --help            Prints this help
##?    -n --never-backup    Never do a backup of user symlinks without prompt
##?    -b --always-backup   Always do a backup of user symlinks without prompt
##?
##?    install
##?
##? SCRIPT_VERSION "2.0.0"
if ! ${DOTLY_INSTALLER:-false}; then
  docs::parse "$@"
elif [[ "${1:-}" == "--help" || "${1:-}" == "-h" ]]; then
  grep '^##?' "$0" | tr '##? ' ' '
fi

output::answer "Creating dotfiles structure"
"$DOTLY_PATH/bin/dot" dotfiles create | log::file "Creating dotfiles structure" || exit 1

# Apply user symlinks
output::answer "Setting up symlinks"
symlinks_args=(--interactive-backup)
if [[ "${DOTLY_ENV:-PROD}" == "CI" ]] || ${never_backup:-}; then
  symlinks_args=(--ignore-backup)
elif ${always_backup:-}; then
  symlinks_args=(--backup)
else
  bk=false
  output::yesno "Do you want to perform a backup of symlinks before apply them (this will include all existing files)" && bk=true
  $bk && output::yesno "Do you want to be asked for every file" || symlinks_args=(--backup)
fi
# echo dot symlinks apply "${symlinks_args[@]}" --after-core
# "$DOTLY_PATH/bin/dot" symlinks apply "${symlinks_args[@]}" --never-backup --after-core | log::file "Applying symlinks" || output::write "Error applying symlinks, see \`dot self debug\`"

echo dot symlinks apply "${symlinks_args[@]}" core
"$DOTLY_PATH/bin/dot" symlinks apply "${symlinks_args[@]}" --never-backup core | log::file "Applying core symlinks" || output::write "Error applying symlinks, see \`dot self debug\`"

echo dot symlinks apply "${symlinks_args[@]}"
"$DOTLY_PATH/bin/dot" symlinks apply "${symlinks_args[@]}" --never-backup | log::file "Applying symlinks" || output::write "Error applying symlinks, see \`dot self debug\`"
touch "$HOME/.z"
unset symlinks_args bk

# ZSH as default shell if we are using zsh
output::answer "Setting zsh as the default shell"
if ! str::contains zsh "$SHELL" && platform::command_exists chsh; then
  sudo -v
  sudo chsh -s "$(command -v zsh)" | log::file "Setting zsh as default shell"
else
  output::error "ZSH could not be setup as default shell"
fi

# If exists zsh install ZIMFW
output::answer "Installing zim"
if platform::command_exists zsh; then
  zsh "$ZIM_HOME/zimfw.zsh" install | log::file "Installing zim"
else
  output::error "ZIM Framework could not be installed"
  output::write "Use \`dot self debug\` to view what happened"
  output::write "You will need to run manually the ZIM Framework install command"
  output::write "  zsh \`$ZIM_HOME/zimfw.zsh\` install"
fi

if [[ "${DOTLY_ENV:-PROD}" != "CI" ]] && platform::command_exists zsh; then
  output::answer "Installing completions"
  {
    zsh "$DOTLY_PATH/bin/dot" shell zsh reload_completions &> /dev/null &&
      output::solution '✅ ZSH Completions realoaded'
  } || output::error '❌ Error reloading completions'
fi

output::answer "Executing custom restoration scripts"
install_scripts_path="$DOTFILES_PATH/restoration_scripts"
if [ -d "$install_scripts_path" ]; then
  find "$install_scripts_path" -mindepth 1 -maxdepth 1 -type l,f -name '*.sh' |
    sort |
    while read -r install_script; do
      #shellcheck disable=SC1090
      {
        [[ -x "$install_script" ]] && . "$install_script" | log::file "Executing afterinstall: $(basename "$install_script")"
      } || {
        output::error "Install script error in \`$(basename "$install_script")\`"
      }
    done
fi

output::empty_line
output::answer '🥳 🎉 SLOTH installed sucessfully'
output::solution "🏁 Now restart your terminal to finish the installation"
