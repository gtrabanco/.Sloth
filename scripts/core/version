#!/usr/bin/env bash

set -uo pipefail
set +e # Avoid crash if any function return false

[[ -z "${SLOTH_PATH:-${DOTLY_PATH:-}}" ]] && exit 1

#shellcheck disable=SC1091
. "${SLOTH_PATH:-${DOTLY_PATH:-}}/scripts/core/_main.sh"
dot::load_library "templating.sh" "core"

check_local_tag_exists() {
  local -r tag="${1:-}"
  git::git "${SLOTH_UPDATE_GIT_ARGS[@]:-}" tag | sort -Vr | grep -q "^v${tag//v/}$"
}

##?   Select a specific sloth/dotly version from local dotly module. If you select
##? any of: latest, stable, minor, it also modifies you 'exports.sh' file
##?
##? Usage:
##?   version [-h | --help]
##?   version [-v | --version]
##?   version [-r | --view-remote]
##?   version [<select_version>]
##?
##? Options:
##?   -h --help         Show this help
##?   -v --version      Show the program version
##?   -r --view-remote  View remote versions (only view)
##?
##? Author:
##?   Gabriel Trabanco Llano <gtrabanco@users.noreply.github.com>
##?
#? v1.1.0
docs::parse "$@"

if ${view_remote:-false}; then
  SLOTH_DEFAULT_URL="${SLOTH_DEFAULT_URL:-${SLOTH_DEFAULT_GIT_SSH_URL:-git+ssh://git@github.com:gtrabanco/sloth.git}}"
  git::git "${SLOTH_UPDATE_GIT_ARGS[@]:-}" ls-remote --tags --refs "$SLOTH_DEFAULT_URL" "v*.*.*" 2>/dev/null | awk '{gsub("\\^{}","", $NF);gsub("refs/tags/v",""); print $NF}' | sort -Vur
  exit 0
fi

if [[ -z "${select_version:-}" ]]; then
  declare -a local_tags
  readarray -t local_tags < <(git::git "${SLOTH_UPDATE_GIT_ARGS[@]:-}" tag | sort -Vr)
  local_tags+=("stable" "latest")
  selected_tag="$(printf "%s\n" "${local_tags[@]}" | fzf --header "Select a dotly version" --preview "")"
else
  selected_tag="$select_version"
fi

# .Sloth were installed using a package manager
if platform::command_exists brew && brew list gtrabanco/tools/dot; then
  output::error "To choose a custom version use .Sloth as submodule and not brew version"
  exit 1
fi

case "$selected_tag" in
"stable")
  latest_stable="$(sloth_update::get_latest_stable_version)"
  if [[ -n "$latest_stable" ]]; then
    # "${SLOTH_UPDATE_GIT_ARGS[@]:-}"
    git::sloth_repository_exec git checkout -q "$latest_stable"
    output::solution "Switched to latest .Sloth stable version $latest_stable"
    templating::modify_bash_file_variable "$DOTFILES_PATH/shell/exports.sh" "SLOTH_UPDATE_VERSION" "stable"
  else
    output::error "No releases locally yet"
  fi
  ;;
"latest")
  templating::modify_bash_file_variable "$DOTFILES_PATH/shell/exports.sh" "SLOTH_UPDATE_VERSION" "latest"
  git::git "${SLOTH_UPDATE_GIT_ARGS[@]:-}" checkout -q "${SLOTH_GITMODULES_BRANCH:-${SLOTH_DEFAULT_BRANCH:-main}}"
  ;;
*)
  if [[ -n "$selected_tag" ]] && check_local_tag_exists "$selected_tag"; then
    templating::modify_bash_file_variable "$DOTFILES_PATH/shell/exports.sh" "SLOTH_UPDATE_VERSION" "$selected_tag"
    git::git "${SLOTH_UPDATE_GIT_ARGS[@]:-}" checkout -q "$selected_tag"
    output::solution "Switched to Sloth version $selected_tag"

    output::answer ".Sloth is update locked. Which mean that can not be updated."
    output::answer "To unlock updates type: \`dot self update --enable\` command"
    touch "${SLOTH_FORCE_CURRENT_VERSION_FILE:-$DOTFILES_PATH/.sloth_force_current_version}"
  elif [[ -n "$selected_tag" ]] && ! check_local_tag_exists "$selected_tag"; then
    output::error "Selected version does not exists locally"
    exit 1
  fi
  ;;
esac
