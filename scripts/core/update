#!/usr/bin/env bash

set -euo pipefail

[[ -z "${SLOTH_PATH:-${DOTLY_PATH:-}}" ]] && exit 1

#shellcheck disable=SC1091
. "${SLOTH_PATH:-${DOTLY_PATH:-}}/scripts/core/_main.sh"
dot::load_library "git_extended.sh" "core"
dot::load_library "sloth_update.sh" "core"

void() {
  return
}

##? Update dotly/sloth to the latest stable release
##?
##? Usage:
##?    update [--disable | --enable | --async]
##?
##? Options:
##?    --disable  Deactivate the dotly update command
##?    --enable   Activate the dotly update command
##?    --async    Asynchronous update
##?
##? SCRIPT_VERSION=3.0.0
docs::parse "$@"

if ${disable:-enable}; then
  touch "$DOTFILES_PATH/.sloth_force_current_version"
  exit 0
elif ${enable:-false}; then
  rm -f "$DOTFILES_PATH/.sloth_force_current_version"
  exit 0
elif ${async:-false}; then
  if [[ ${SLOTH_ENV:0:1} =~ ^[dD]$ ]]; then
    output::error ".Sloth async updates are not possible in Development mode"
  else
    async sloth_update::async sloth_update::async_success void
  fi
  exit
fi

if [[ -f "$DOTFILES_PATH/.sloth_force_current_version" ]]; then
  output::error "Updates are disabled: use \`dot core update --enable\` to enable them"
fi

[[ -n "${DEBUG:-}" ]] && echo "---- Executing the function sloth_update::gracefully ----" | command -p tee -a "${DOTLY_LOG_FILE:-$HOME/dotly.log}" &> /dev/null
status=0
sloth_update::gracefully 2>&1 | log::file "Updating .Sloth" || status=$?
[[ -n "${DEBUG:-}" ]] && echo "---- End of Executing the function sloth_update::gracefully ----" | command -p tee -a "${DOTLY_LOG_FILE:-$HOME/dotly.log}" &> /dev/null

if [[ $status -ne 0 ]]; then
  case $status in
    10)
      output::error "No update, dirty or pending commits"
      exit $status
      ;;
    20)
      output::error "No update, upstream does not exists and/or could not be set"
      exit $status
      ;;
    30)
      output::error "No update, remote head branch could not be set"
      exit $status
      ;;
    40)
      output::error "No updated something was wrong"
      exit $status
      ;;
    1)
      output::error "Something went wrong"
      exit $status
      ;;
  esac
fi

if [[ -f "$DOTFILES_PATH/.sloth_updated" ]]; then
  if sloth_update::exists_migration_script; then
    output::answer "There is a migration script for this version"
    "${SLOTH_PATH:-${DOTLY_PATH:-}}/bin/dot" core migration --updated
  fi

  output::answer 'âœ… .Sloth updated to the latest version'
else
  output::answer 'ðŸ‘Œ You already have latest .Sloth version'
fi
