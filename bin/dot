#!/usr/bin/env bash
#shellcheck disable=SC2128,SC2016

set -euo pipefail

# In Linux we can do this with readlink -f but will fail in macOS and BSD OS
if [[ -z "${SLOTH_PATH:-${DOTLY_PATH:-}}" || ! -d "${SLOTH_PATH:-${DOTLY_PATH:-}}" ]]; then
  if ! command -vp realpath &> /dev/null; then
    # https://unix.stackexchange.com/a/558360
    realpath() {
      local -r file_path="${1:-}"
      if [[ -d "${1:-}" ]]; then
        cd -P -- "${file_path}" && builtin pwd
      else
        cd -P -- "${file_path%/*}" && printf "%s/%s\n" "$PWD" "${file_path##*/}"
      fi
    }
  fi

  if command -v brew &> /dev/null && brew list gtrabanco/tools/dot &> /dev/null; then
    dot_path="$(brew --prefix gtrabanco/tools/dot)"
  else
    dot_path="${BASH_SOURCE}"
    until [[ ! -L $dot_path ]]; do
      dot_path="$(readlink "$dot_path")"
    done
  fi
  SLOTH_PATH="$(realpath "${dot_path//\/bin\/dot/}")"
  DOTLY_PATH="$SLOTH_PATH"

  if [[ ! -d "$SLOTH_PATH" || ! -x "${SLOTH_PATH}/bin/dot" ]]; then
    echo "Error: Could not find the .Sloth source code."
    exit 1
  fi

  if [[ -z "${DOTFILES_PATH:-}" && -d "${HOME}/.dotfiles/scripts" ]]; then
    export DOTFILES_PATH="$HOME/.dotfiles"
  fi
  unset dot_path
  export SLOTH_PATH DOTLY_PATH
fi

[[ -z "${SLOTH_PATH:-${DOTLY_PATH:-}}" ]] && echo "Error: Could not find where the .Sloth is installed." && exit 1

#shellcheck disable=SC1091
. "${SLOTH_PATH:-${DOTLY_PATH:-}}/scripts/core/src/_main.sh"

##? Execute lazy scripts in your dotfiles
##?
##? Usage:
##?    dot self-update
##?    dot autoupdate
##?    dot async-update
##?    dot -h | --help
##?    dot -v | --version
##?    dot --prefix
##?    dot <context> <script> [<args>...]
##?    dot <context>
##?    dot
##?
##? Arguments:
##?    context  Is the subfolder in "\`\${DOTFILES_PATH}/scripts\`" or
##?             "\`\${SLOTH_PATH:-\${DOTLY_PATH:-}}/scripts\`"
##?    script   Is the script in "\`\${DOTFILES_PATH}/scripts/<context>\`" or
##?             "\`\${SLOTH_PATH:-\${DOTLY_PATH:-}}/scripts/<context>\`"
##?
##? Options:
##?    -h --help           Gives help to the user
##?    -v --version        Show the dot command version
##?    --prefix            Prints the path to .Sloth
##?    self-update update  Autoupdate .Sloth. If brew was used to install use brew
##?                        to update.
##?    async-update        Same as self-update but asynchronously
##?
#? v2.2.0

# This script help
if [[ "${1:-}" == "-h" || "${1:-}" == "--help" ]]; then
  docs::parse_docopt "$BASH_SOURCE"
  exit

# This script version
elif [[ "${1:-}" == "-v" || "${1:-}" == "--version" ]]; then
  if platform::command_exists brew && brew list gtrabanco/tools/dot &> /dev/null; then
    brew list gtrabanco/tools/dot --version | cut -d ' ' -f 2
  else
    docs::parse_script_version "$BASH_SOURCE"
  fi
  exit
# Self-update of .Sloth
elif [[ "${1:-}" == "self-update" || "${1:-}" == "update" ]] && args::total_is 1 "$@"; then
  "${SLOTH_PATH:-${DOTLY_PATH:-}}/bin/dot" core update
  exit

# Autoupdate (Async update)
elif [[ "${1:-}" == "async-update" ]] && args::total_is 1 "$@"; then
  "${SLOTH_PATH:-${DOTLY_PATH:-}}/bin/dot" core update --async
  exit

# Get PATH to .Sloth
elif [[ "${1:-}" == "--prefix" ]] && args::total_is 1 "$@"; then
  echo "${SLOTH_PATH:-${DOTLY_PATH:-}}"
  exit
fi

fzf_prompt() {
  local fzf_paths="$1"

  script::depends_on fzf

  script="$(
    echo "$fzf_paths" |
      command -p xargs -I % sh -c 'echo "$(command -p basename $(command -p dirname %)) $(command -p basename %)"' |
      fzf \
        --height 100% \
        --preview '"${SLOTH_PATH:-${DOTLY_PATH:-}}/bin/dot" $(echo {} | command -p cut -d" " -f 1) $(echo {} | command -p cut -d" " -f 2) -h'
  )"

  printf "%s" "$script"
  read -r args

  "${DOTLY_PATH}/bin/dot" "${script}" "${args}"
}

script_exist() {
  [[ -x "${1}/scripts/${2}/${3}" ]]
}

if args::has_no_args "$@"; then
  fzf_prompt "$(dot::list_scripts_path)"
elif args::total_is 1 "$@"; then
  fzf_prompt "$(dot::list_scripts_path | grep "/$1/")"
else
  context="${1:-}"
  script="${2:-}"
  firstarg="${3:-}"
  #shellcheck disable=SC2034
  SCRIPT_NAME="${SLOTH_SCRIPT_BASE_NAME} ${context} ${script}"

  [[ $# -ge 2 ]] && shift 2

  script_path=""
  [[ -n "${DOTFILES_PATH:-}" ]] && script_exist "${DOTFILES_PATH}" "${context}" "${script}" && script_path="${DOTFILES_PATH}"
  script_exist "${SLOTH_PATH:-${DOTLY_PATH:-}}" "$context" "$script" && script_path="${SLOTH_PATH:-${DOTLY_PATH:-}}"

  if [ -z "$script_path" ]; then
    output::error "The script <$context / $script> doesn't exist"
    exit 1
  fi

  # Full path to the calling script
  script_full_path="${script_path}/scripts/${context}/${script}"

  # Automatic --help and --version
  if [[ "$firstarg" == "-h" || "$firstarg" == "--help" ]]; then
    docs::parse_script "${script_full_path}" "--help"
    exit
  elif [[ "$firstarg" == "-v" || "$firstarg" == "--version" ]]; then
    docs::parse_script "${script_full_path}" "--version"
    exit
  fi

  # If old version call the script, else source it
  if
    grep -q "FORCE_LEGACY_EXECUTION" "${script_full_path}" ||
      grep -q "^docs::parse" "${script_full_path}" ||
      grep -q "/scripts/core/_main.sh" "${script_full_path}" ||
      grep -q "/scripts/core/src/_main.sh" "${script_full_path}" ||
      grep -q "/scripts/self/_main.sh" "${script_full_path}" ||
      grep -q "/scripts/self/src/_main.sh" "${script_full_path}"
  then
    SLOTH_PATH="$SLOTH_PATH" DOTLY_PATH="$DOTLY_PATH" DOTFILES_PATH="${DOTFILES_PATH:-}" "${script_full_path}" "$@"
  else
    #shellcheck disable=SC1090
    . "${script_full_path}"
  fi
fi
